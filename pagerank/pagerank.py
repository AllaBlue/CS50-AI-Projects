import os
import random
import re
import sys

DAMPING = 0.85
SAMPLES = 10000


def main():
    if len(sys.argv) != 2:
        sys.exit("Usage: python pagerank/pagerank.py pagerank/corpus")
    corpus = crawl(sys.argv[1])
    ranks = sample_pagerank(corpus, DAMPING, SAMPLES)
    print(f"PageRank Results from Sampling (n = {SAMPLES})")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")
    ranks = iterate_pagerank(corpus, DAMPING)
    print(f"PageRank Results from Iteration")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")


def crawl(directory):
    """
    Parse a directory of HTML pages and check for links to other pages.
    Return a dictionary where each key is a page, and values are
    a list of all other pages in the corpus that are linked to by the page.
    """
    pages = dict()

    # Extract all links from HTML files
    for filename in os.listdir(directory):
        if not filename.endswith(".html"):
            continue
        with open(os.path.join(directory, filename)) as f:
            contents = f.read()
            links = re.findall(r"<a\s+(?:[^>]*?)href=\"([^\"]*)\"", contents)
            pages[filename] = set(links) - {filename}

    # Only include links to other pages in the corpus
    for filename in pages:
        pages[filename] = set(
            link for link in pages[filename]
            if link in pages
        )

    return pages


def transition_model(corpus, page, damping_factor):
    """
    Return a probability distribution over which page to visit next,
    given a current page.

    With probability `damping_factor`, choose a link at random
    linked to by `page`. With probability `1 - damping_factor`, choose
    a link at random chosen from all pages in the corpus.
    """

    model = {}

    # Equal probability to go to any page in all pages that are in corpus
    for p in corpus:
        model[p] = (1 - damping_factor)/len(corpus)
    
    # Probability to follow one of the links that are presented on the current page
    links = corpus[page]
    for link in links:
        model[link] += damping_factor/len(links)
    
    return model


def sample_pagerank(corpus, damping_factor, n):
    """
    Return PageRank values for each page by sampling `n` pages
    according to transition model, starting with a page at random.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """

    # Сreate samples list to save all generated samples
    samples = []

    # The first sample should be generated by choosing from a page at random.
    page = random.choice(list(corpus.keys()))
    
    samples.append(page)

    # Random choosing from corpus a sample with given distribution from transition model
    for i in range(n):
        distribution = transition_model(
            corpus=corpus, page=samples[-1], damping_factor=damping_factor)
        sample = random.choices(population=list(distribution.keys()), 
                                weights=distribution.values())[0]
        samples.append(sample)

    # Counting the percentage of each sample in samples
    sample_pagerank = {}
    for sample in samples:
        sample_pagerank[sample] = (samples.count(sample))/len(samples)
    
    return sample_pagerank


def iterate_pagerank(corpus, damping_factor):
    """
    Return PageRank values for each page by iteratively updating
    PageRank values until convergence.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    pagerank = {}

    # Mark all pages that do not have links to other pages at all:
    no_links = set()
    for p in corpus:
        if len(corpus[p]) == 0:
            no_links.add(p)
    
    # For every page that does not have any links to other pages, create links to every page including itself:
    for n in no_links:
        for p in corpus:
            corpus[n].add(p)

    # Get all pages that links to a page argument
    def get_links_to_page(corpus, page):
        links_to_page = set()
        for p in corpus:
            if page in corpus[p]:
                links_to_page.add(p)
    
        return links_to_page
    
    # Get dictionary of links to every page. Tha is dictinary that maps page to links that lead to this page.
    links_to_pages = {}
    for p in corpus:
        links_to_p = get_links_to_page(corpus=corpus, page=p)
        links_to_pages[p] = links_to_p
    
    # Set initial pagerank to pages 1/N
    for page in corpus:
        pagerank[page] = 1/len(corpus)
    
    change_value = 0.001
    change = change_value + 1

    # While change between pageranks is bigger than 0.001 continue to calculate pageranks
    while change > change_value:
        second_option_pageranks = {}
        for p in corpus:

            # If there are no links to current page p then we assume that a page rank for this page is 0
            if len(links_to_pages[p]) == 0:
                second_option_pageranks[p] = 0
            
            # For the second condition, we need to consider each possible page i that links to page p. For each of those incoming pages, 
            # let NumLinks(i) be the number of links on page i. Each page i that links to p has its own PageRank, PR(i), 
            # representing the probability that we are on page i at any given time. And since from page i we travel to any of that page’s 
            # links with equal probability, we divide PR(i) by the number of links NumLinks(i) to get the probability that we were on page i 
            # and chose the link to page p. 
            # This gives us the following definition for the PageRank for a page p.
            for i in links_to_pages[p]:
                numlinks_i = len(corpus[i])
                pagerank_i = pagerank[i]

                if (p in second_option_pageranks):
                    second_option_pageranks[p] = second_option_pageranks[p] + pagerank_i/numlinks_i
                else:
                    second_option_pageranks[p] = pagerank_i/numlinks_i
        
        # new_page rank summs to options of getting ti the page p based on damping_factor
        new_pagerank = {}
        for p in corpus:
            new_pagerank[p] = (1-damping_factor)/len(corpus) + \
                damping_factor*(second_option_pageranks[p])
        
        # Check what the change between newpagerank and the pagerank
        for p in corpus:
            change = abs(new_pagerank[p] - pagerank[p])

        # copy newpagerank to the pagerank
        for p in pagerank:
            pagerank[p] = new_pagerank[p]
    
    return pagerank
    

if __name__ == "__main__":
    main()